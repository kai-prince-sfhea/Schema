Pandoc
  Meta
    { unMeta =
        fromList
          [ ( "author"
            , MetaList
                [ MetaInlines
                    [ Str "Kai"
                    , Space
                    , Str "Prince"
                    , Space
                    , Str "SFHEA"
                    ]
                ]
            )
          , ( "authors"
            , MetaList
                [ MetaMap
                    (fromList
                       [ ( "id" , MetaString "1" )
                       , ( "letter" , MetaString "a" )
                       , ( "metadata" , MetaMap (fromList []) )
                       , ( "name"
                         , MetaMap
                             (fromList
                                [ ( "family"
                                  , MetaInlines [ Str "SFHEA" ]
                                  )
                                , ( "given"
                                  , MetaInlines [ Str "Kai Prince" ]
                                  )
                                , ( "literal"
                                  , MetaInlines
                                      [ Str "Kai"
                                      , Space
                                      , Str "Prince"
                                      , Space
                                      , Str "SFHEA"
                                      ]
                                  )
                                ])
                         )
                       , ( "number" , MetaString "1" )
                       ])
                ]
            )
          , ( "by-author"
            , MetaList
                [ MetaMap
                    (fromList
                       [ ( "id" , MetaString "1" )
                       , ( "letter" , MetaString "a" )
                       , ( "metadata" , MetaMap (fromList []) )
                       , ( "name"
                         , MetaMap
                             (fromList
                                [ ( "family"
                                  , MetaInlines [ Str "SFHEA" ]
                                  )
                                , ( "given"
                                  , MetaInlines [ Str "Kai Prince" ]
                                  )
                                , ( "literal"
                                  , MetaInlines
                                      [ Str "Kai"
                                      , Space
                                      , Str "Prince"
                                      , Space
                                      , Str "SFHEA"
                                      ]
                                  )
                                ])
                         )
                       , ( "number" , MetaString "1" )
                       ])
                ]
            )
          , ( "callouty-theorem"
            , MetaMap
                (fromList
                   [ ( "cor" , MetaInlines [ Str "default" ] )
                   , ( "def"
                     , MetaMap
                         (fromList
                            [ ( "callout"
                              , MetaMap
                                  (fromList
                                     [ ( "appearance"
                                       , MetaInlines [ Str "minimal" ]
                                       )
                                     , ( "type"
                                       , MetaInlines [ Str "note" ]
                                       )
                                     ])
                              )
                            , ( "override-title" , MetaBool False )
                            ])
                     )
                   , ( "exr"
                     , MetaMap
                         (fromList
                            [ ( "callout"
                              , MetaMap
                                  (fromList
                                     [ ( "appearance"
                                       , MetaInlines [ Str "minimal" ]
                                       )
                                     , ( "type"
                                       , MetaInlines [ Str "caution" ]
                                       )
                                     ])
                              )
                            , ( "override-title" , MetaBool False )
                            ])
                     )
                   , ( "lem"
                     , MetaMap
                         (fromList
                            [ ( "callout"
                              , MetaMap
                                  (fromList
                                     [ ( "appearance"
                                       , MetaInlines [ Str "minimal" ]
                                       )
                                     , ( "type"
                                       , MetaInlines [ Str "warning" ]
                                       )
                                     ])
                              )
                            , ( "override-title" , MetaBool False )
                            ])
                     )
                   , ( "proof"
                     , MetaMap
                         (fromList
                            [ ( "callout"
                              , MetaMap
                                  (fromList
                                     [ ( "appearance"
                                       , MetaInlines [ Str "default" ]
                                       )
                                     , ( "collapse" , MetaBool True )
                                     , ( "icon" , MetaBool False )
                                     , ( "type"
                                       , MetaInlines [ Str "tip" ]
                                       )
                                     ])
                              )
                            , ( "override-title" , MetaBool True )
                            ])
                     )
                   , ( "prp"
                     , MetaMap
                         (fromList
                            [ ( "callout"
                              , MetaMap
                                  (fromList
                                     [ ( "appearance"
                                       , MetaInlines [ Str "minimal" ]
                                       )
                                     , ( "type"
                                       , MetaInlines [ Str "note" ]
                                       )
                                     ])
                              )
                            , ( "override-title" , MetaBool False )
                            ])
                     )
                   , ( "remark"
                     , MetaMap
                         (fromList
                            [ ( "callout"
                              , MetaMap
                                  (fromList
                                     [ ( "appearance"
                                       , MetaInlines [ Str "default" ]
                                       )
                                     , ( "collapse" , MetaBool False )
                                     , ( "icon" , MetaBool True )
                                     , ( "type"
                                       , MetaInlines [ Str "tip" ]
                                       )
                                     ])
                              )
                            , ( "override-title" , MetaBool True )
                            ])
                     )
                   , ( "solution"
                     , MetaMap
                         (fromList
                            [ ( "callout"
                              , MetaMap
                                  (fromList
                                     [ ( "appearance"
                                       , MetaInlines [ Str "default" ]
                                       )
                                     , ( "collapse" , MetaBool True )
                                     , ( "icon" , MetaBool True )
                                     , ( "type"
                                       , MetaInlines [ Str "tip" ]
                                       )
                                     ])
                              )
                            , ( "override-title" , MetaBool True )
                            ])
                     )
                   , ( "thm"
                     , MetaMap
                         (fromList
                            [ ( "callout"
                              , MetaMap
                                  (fromList
                                     [ ( "appearance"
                                       , MetaInlines [ Str "minimal" ]
                                       )
                                     , ( "type"
                                       , MetaInlines [ Str "important" ]
                                       )
                                     ])
                              )
                            , ( "override-title" , MetaBool False )
                            ])
                     )
                   ])
            )
          , ( "date" , MetaInlines [ Str "2025-08-13" ] )
          , ( "schema"
            , MetaMap
                (fromList
                   [ ( "backlinks" , MetaBool True )
                   , ( "outlinks" , MetaBool True )
                   ])
            )
          , ( "terms"
            , MetaList
                [ MetaMap
                    (fromList
                       [ ( "associatedMacros"
                         , MetaList
                             [ MetaMap
                                 (fromList
                                    [ ( "command"
                                      , MetaInlines [ Str "Group" ]
                                      )
                                    , ( "macro"
                                      , MetaInlines [ Str "{\\Gamma}" ]
                                      )
                                    ])
                             , MetaMap
                                 (fromList
                                    [ ( "command"
                                      , MetaInlines
                                          [ Str "GroupOperation" ]
                                      )
                                    , ( "macro"
                                      , MetaInlines
                                          [ Str "{#1}\\cdot{#2}" ]
                                      )
                                    , ( "variables"
                                      , MetaInlines [ Str "2" ]
                                      )
                                    ])
                             , MetaMap
                                 (fromList
                                    [ ( "command"
                                      , MetaInlines
                                          [ Str "GroupIdentity" ]
                                      )
                                    , ( "description"
                                      , MetaInlines
                                          [ Str "The"
                                          , Space
                                          , Str "identity"
                                          , Space
                                          , Str "of"
                                          , Space
                                          , Str "the"
                                          , Space
                                          , Str "group"
                                          , Space
                                          , Math InlineMath "\\Group"
                                          , Str "."
                                          ]
                                      )
                                    , ( "macro"
                                      , MetaInlines [ Str "{e}" ]
                                      )
                                    ])
                             , MetaMap
                                 (fromList
                                    [ ( "command"
                                      , MetaInlines
                                          [ Str "GroupElement" ]
                                      )
                                    , ( "macro"
                                      , MetaInlines [ Str "{\\gamma}" ]
                                      )
                                    ])
                             ]
                         )
                       , ( "id" , MetaInlines [ Str "def-group" ] )
                       , ( "regex" , MetaInlines [ Str "[Gg]roup" ] )
                       , ( "term" , MetaInlines [ Str "group" ] )
                       ])
                ]
            )
          , ( "title" , MetaInlines [ Str "Group" ] )
          ]
    }
  [ Header
      1 ( "introduction" , [] , [] ) [ Str "Introduction" ]
  , Div
      ( "def-group" , [ "theorem" , "definition" ] , [] )
      [ Para
          [ Span
              ( "" , [ "theorem-title" ] , [] )
              [ Strong
                  [ Str "Definition"
                  , Space
                  , Str "1"
                  , Space
                  , Str "("
                  , Str "Group"
                  , Str ")"
                  ]
              ]
          , Space
          , Str "A"
          , Space
          , Emph [ Str "group" ]
          , Space
          , Str "is"
          , Space
          , Str "a"
          , Space
          , Str "non-empty"
          , Space
          , Str "set"
          , Space
          , Math InlineMath "\\Group"
          , Space
          , Str "together"
          , Space
          , Str "with"
          , Space
          , Str "a"
          , Space
          , Str "binary"
          , Space
          , Str "operation"
          , Space
          , Str "on"
          , Space
          , Math InlineMath "\\Group"
          , Str ","
          , Space
          , Str "denoted"
          , Space
          , Quoted
              DoubleQuote [ Math InlineMath "\\GroupOperation{}{}" ]
          , Str ","
          , Space
          , Str "that"
          , Space
          , Str "combines"
          , Space
          , Str "any"
          , Space
          , Str "two"
          , Space
          , Str "elements"
          , Space
          , Math InlineMath "\\GroupElement"
          , Space
          , Str "and"
          , Space
          , Math InlineMath "\\GroupElement'"
          , Space
          , Str "of"
          , Space
          , Math InlineMath "\\Group"
          , Space
          , Str "to"
          , Space
          , Str "form"
          , Space
          , Str "an"
          , Space
          , Str "element"
          , Space
          , Str "of"
          , Space
          , Math InlineMath "\\Group"
          , Str ","
          , Space
          , Str "denoted"
          , Space
          , Math
              InlineMath
              "\\GroupOperation{\\GroupElement}{\\GroupElement'}"
          , Str ","
          , Space
          , Str "such"
          , Space
          , Str "that"
          , Space
          , Str "the"
          , Space
          , Str "following"
          , Space
          , Str "three"
          , Space
          , Str "requirements,"
          , Space
          , Str "known"
          , Space
          , Str "as"
          , Space
          , Emph [ Str "group" , Space , Str "axioms" ]
          , Str ","
          , Space
          , Str "are"
          , Space
          , Str "satisfied:"
          ]
      , BulletList
          [ [ Para
                [ Emph [ Str "Associativity:" ]
                , Space
                , Str "For"
                , Space
                , Str "all"
                , Space
                , Math InlineMath "{g},{h},{j}"
                , Space
                , Str "in"
                , Space
                , Math InlineMath "\\Group"
                , Str ","
                , Space
                , Str "one"
                , Space
                , Str "has"
                , Space
                , Math
                    InlineMath
                    "\\GroupOperation{(\\GroupOperation{g}{h})}{j}=\\GroupOperation{g}{(\\GroupOperation{h}{j})}"
                , Str "."
                ]
            ]
          , [ Para
                [ Emph [ Str "Identity:" ]
                , Space
                , Str "There"
                , Space
                , Str "exists"
                , Space
                , Str "an"
                , Space
                , Str "element"
                , Space
                , Math InlineMath "\\Identity"
                , Space
                , Str "in"
                , Space
                , Math InlineMath "\\Group"
                , Space
                , Str "such"
                , Space
                , Str "that,"
                , Space
                , Str "for"
                , Space
                , Str "every"
                , Space
                , Math InlineMath "{g}"
                , Space
                , Str "in"
                , Space
                , Math InlineMath "\\Group"
                , Str ","
                , Space
                , Str "one"
                , Space
                , Str "has"
                , Space
                , Math InlineMath "\\GroupOperation{\\Identity}{g}={g}"
                , Space
                , Str "and"
                , Space
                , Math InlineMath "\\GroupOperation{g}{\\Identity}={g}"
                , Str "."
                , Space
                , Str "Such"
                , Space
                , Str "an"
                , Space
                , Str "element"
                , Space
                , Str "is"
                , Space
                , Str "unique"
                , Space
                , Str "and"
                , Space
                , Str "is"
                , Space
                , Str "called"
                , Space
                , Str "the"
                , Space
                , Emph [ Str "identity" , Space , Str "element" ]
                , Str "."
                ]
            ]
          , [ Para
                [ Emph [ Str "Unique" , Space , Str "Inverse:" ]
                , Space
                , Str "For"
                , Space
                , Str "each"
                , Space
                , Math InlineMath "{g}"
                , Space
                , Str "in"
                , Space
                , Math InlineMath "\\Group"
                , Str ","
                , Space
                , Str "there"
                , Space
                , Str "exists"
                , Space
                , Str "an"
                , Space
                , Str "element"
                , Space
                , Math InlineMath "{h}"
                , Space
                , Str "in"
                , Space
                , Math InlineMath "\\Group"
                , Space
                , Str "such"
                , Space
                , Str "that"
                , Space
                , Math InlineMath "\\GroupOperation{g}{h}=\\Identity"
                , Space
                , Str "and"
                , Space
                , Math InlineMath "\\GroupOperation{h}{g}=\\Identity"
                , Str ","
                , Space
                , Str "where"
                , Space
                , Math InlineMath "\\Identity"
                , Space
                , Str "is"
                , Space
                , Str "the"
                , Space
                , Str "identity"
                , Space
                , Str "element."
                , Space
                , Str "For"
                , Space
                , Str "each"
                , Space
                , Math InlineMath "{g}"
                , Str ","
                , Space
                , Str "the"
                , Space
                , Str "element"
                , Space
                , Math InlineMath "{h}"
                , Space
                , Str "is"
                , Space
                , Str "unique"
                , Space
                , Str "and"
                , Space
                , Str "is"
                , Space
                , Str "called"
                , Space
                , Str "the"
                , Space
                , Emph [ Str "inverse" ]
                , Space
                , Str "of"
                , Space
                , Math InlineMath "{h}"
                , Space
                , Str "and"
                , Space
                , Str "is"
                , Space
                , Str "denoted"
                , Space
                , Math InlineMath "\\Inverse{g}"
                , Str "."
                ]
            ]
          ]
      ]
  , Header
      1
      ( "more-information" , [] , [] )
      [ Str "More" , Space , Str "Information" ]
  , Para
      [ Str "You"
      , Space
      , Str "can"
      , Space
      , Str "learn"
      , Space
      , Str "more"
      , Space
      , Str "about"
      , Space
      , Str "controlling"
      , Space
      , Str "the"
      , Space
      , Str "appearance"
      , Space
      , Str "of"
      , Space
      , Str "HTML"
      , Space
      , Str "output"
      , Space
      , Str "here:"
      , Space
      , Link
          ( "" , [ "uri" ] , [] )
          [ Str
              "https://quarto.org/docs/output-formats/html-basics.html"
          ]
          ( "https://quarto.org/docs/output-formats/html-basics.html"
          , ""
          )
      ]
  ]
