Pandoc
  Meta
    { unMeta =
        fromList
          [ ( "author"
            , MetaList
                [ MetaInlines
                    [ Str "Kai"
                    , Space
                    , Str "Prince"
                    , Space
                    , Str "SFHEA"
                    ]
                ]
            )
          , ( "authors"
            , MetaList
                [ MetaMap
                    (fromList
                       [ ( "id" , MetaString "1" )
                       , ( "letter" , MetaString "a" )
                       , ( "metadata" , MetaMap (fromList []) )
                       , ( "name"
                         , MetaMap
                             (fromList
                                [ ( "family"
                                  , MetaInlines [ Str "SFHEA" ]
                                  )
                                , ( "given"
                                  , MetaInlines [ Str "Kai Prince" ]
                                  )
                                , ( "literal"
                                  , MetaInlines
                                      [ Str "Kai"
                                      , Space
                                      , Str "Prince"
                                      , Space
                                      , Str "SFHEA"
                                      ]
                                  )
                                ])
                         )
                       , ( "number" , MetaString "1" )
                       ])
                ]
            )
          , ( "by-author"
            , MetaList
                [ MetaMap
                    (fromList
                       [ ( "id" , MetaString "1" )
                       , ( "letter" , MetaString "a" )
                       , ( "metadata" , MetaMap (fromList []) )
                       , ( "name"
                         , MetaMap
                             (fromList
                                [ ( "family"
                                  , MetaInlines [ Str "SFHEA" ]
                                  )
                                , ( "given"
                                  , MetaInlines [ Str "Kai Prince" ]
                                  )
                                , ( "literal"
                                  , MetaInlines
                                      [ Str "Kai"
                                      , Space
                                      , Str "Prince"
                                      , Space
                                      , Str "SFHEA"
                                      ]
                                  )
                                ])
                         )
                       , ( "number" , MetaString "1" )
                       ])
                ]
            )
          , ( "callouty-theorem"
            , MetaMap
                (fromList
                   [ ( "cor" , MetaInlines [ Str "default" ] )
                   , ( "def"
                     , MetaMap
                         (fromList
                            [ ( "callout"
                              , MetaMap
                                  (fromList
                                     [ ( "appearance"
                                       , MetaInlines [ Str "minimal" ]
                                       )
                                     , ( "type"
                                       , MetaInlines [ Str "note" ]
                                       )
                                     ])
                              )
                            , ( "override-title" , MetaBool False )
                            ])
                     )
                   , ( "exr"
                     , MetaMap
                         (fromList
                            [ ( "callout"
                              , MetaMap
                                  (fromList
                                     [ ( "appearance"
                                       , MetaInlines [ Str "minimal" ]
                                       )
                                     , ( "type"
                                       , MetaInlines [ Str "caution" ]
                                       )
                                     ])
                              )
                            , ( "override-title" , MetaBool False )
                            ])
                     )
                   , ( "lem"
                     , MetaMap
                         (fromList
                            [ ( "callout"
                              , MetaMap
                                  (fromList
                                     [ ( "appearance"
                                       , MetaInlines [ Str "minimal" ]
                                       )
                                     , ( "type"
                                       , MetaInlines [ Str "warning" ]
                                       )
                                     ])
                              )
                            , ( "override-title" , MetaBool False )
                            ])
                     )
                   , ( "proof"
                     , MetaMap
                         (fromList
                            [ ( "callout"
                              , MetaMap
                                  (fromList
                                     [ ( "appearance"
                                       , MetaInlines [ Str "default" ]
                                       )
                                     , ( "collapse" , MetaBool True )
                                     , ( "icon" , MetaBool False )
                                     , ( "type"
                                       , MetaInlines [ Str "tip" ]
                                       )
                                     ])
                              )
                            , ( "override-title" , MetaBool True )
                            ])
                     )
                   , ( "prp"
                     , MetaMap
                         (fromList
                            [ ( "callout"
                              , MetaMap
                                  (fromList
                                     [ ( "appearance"
                                       , MetaInlines [ Str "minimal" ]
                                       )
                                     , ( "type"
                                       , MetaInlines [ Str "note" ]
                                       )
                                     ])
                              )
                            , ( "override-title" , MetaBool False )
                            ])
                     )
                   , ( "remark"
                     , MetaMap
                         (fromList
                            [ ( "callout"
                              , MetaMap
                                  (fromList
                                     [ ( "appearance"
                                       , MetaInlines [ Str "default" ]
                                       )
                                     , ( "collapse" , MetaBool False )
                                     , ( "icon" , MetaBool True )
                                     , ( "type"
                                       , MetaInlines [ Str "tip" ]
                                       )
                                     ])
                              )
                            , ( "override-title" , MetaBool True )
                            ])
                     )
                   , ( "solution"
                     , MetaMap
                         (fromList
                            [ ( "callout"
                              , MetaMap
                                  (fromList
                                     [ ( "appearance"
                                       , MetaInlines [ Str "default" ]
                                       )
                                     , ( "collapse" , MetaBool True )
                                     , ( "icon" , MetaBool True )
                                     , ( "type"
                                       , MetaInlines [ Str "tip" ]
                                       )
                                     ])
                              )
                            , ( "override-title" , MetaBool True )
                            ])
                     )
                   , ( "thm"
                     , MetaMap
                         (fromList
                            [ ( "callout"
                              , MetaMap
                                  (fromList
                                     [ ( "appearance"
                                       , MetaInlines [ Str "minimal" ]
                                       )
                                     , ( "type"
                                       , MetaInlines [ Str "important" ]
                                       )
                                     ])
                              )
                            , ( "override-title" , MetaBool False )
                            ])
                     )
                   ])
            )
          , ( "date" , MetaInlines [ Str "2025-08-03" ] )
          , ( "dependencies"
            , MetaList [ MetaInlines [ Str "group" ] ]
            )
          , ( "macros"
            , MetaList
                [ MetaMap
                    (fromList
                       [ ( "command" , MetaInlines [ Str "Density" ] )
                       , ( "macro" , MetaInlines [ Str "{d}_{#1}" ] )
                       , ( "variables" , MetaInlines [ Str "1" ] )
                       , ( "variablesDefault"
                         , MetaInlines [ Str "\\Folner" ]
                         )
                       ])
                , MetaMap
                    (fromList
                       [ ( "command" , MetaInlines [ Str "Folner" ] )
                       , ( "macro"
                         , MetaInlines [ Str "{\\Phi}_{#1}" ]
                         )
                       , ( "variables" , MetaInlines [ Str "1" ] )
                       , ( "variablesDefault"
                         , MetaInlines [ Str "\\vphantom{}" ]
                         )
                       ])
                ]
            )
          , ( "terms"
            , MetaList
                [ MetaMap
                    (fromList
                       [ ( "alias" , MetaInlines [ Str "F\248lner" ] )
                       , ( "id" , MetaInlines [ Str "def-Folner" ] )
                       , ( "translate" , MetaBool False )
                       ])
                , MetaMap
                    (fromList
                       [ ( "alias"
                         , MetaInlines [ Str "right-F\248lner" ]
                         )
                       , ( "id"
                         , MetaInlines [ Str "def-rightFolner" ]
                         )
                       , ( "translate" , MetaBool False )
                       ])
                , MetaMap
                    (fromList
                       [ ( "alias"
                         , MetaInlines [ Str "left-F\248lner" ]
                         )
                       , ( "id" , MetaInlines [ Str "def-leftFolner" ] )
                       , ( "translate" , MetaBool False )
                       ])
                ]
            )
          , ( "title"
            , MetaInlines [ Str "F\248lner" , Space , Str "sequence" ]
            )
          ]
    }
  [ Header
      1 ( "introduction" , [] , [] ) [ Str "Introduction" ]
  , Div
      ( "def-rightFolner" , [ "theorem" , "definition" ] , [] )
      [ Para
          [ Span
              ( "" , [ "theorem-title" ] , [] )
              [ Strong [ Str "Definition" , Space , Str "1" ] ]
          , Space
          , Str "We"
          , Space
          , Str "define"
          , Space
          , Str "a"
          , Space
          , Emph [ Str "right-F\248lner" , Space , Str "sequence" ]
          , Space
          , Str "in"
          , Space
          , Str "a"
          , Space
          , Str "group,"
          , Space
          , Math InlineMath "\\Group"
          , Str ","
          , Space
          , Str "as"
          , Space
          , Str "a"
          , Space
          , Str "sequence"
          , Space
          , Math
              InlineMath "\\Folner =(\\Folner[N])_{N\\in\\mathbb{N}}"
          , Space
          , Str "of"
          , Space
          , Str "finite"
          , Space
          , Str "subsets"
          , Space
          , Str "of"
          , Space
          , Math InlineMath "\\Gamma"
          , Space
          , Str "satisfying"
          , Space
          , Math
              DisplayMath
              "\\lim_{N\\rightarrow\\infty}\\frac{|\\GroupOperation{(\\GroupOperation{\\Folner[N]}{\\Inverse{\\GroupElement}})}{\\Folner[N]}|}{|\\Folner[N]|}=1"
          , Str "for"
          , Space
          , Str "all"
          , Space
          , Math InlineMath "\\GroupElement\\in\\Group"
          , Str "."
          ]
      ]
  , Div
      ( "def-leftFolner" , [ "theorem" , "definition" ] , [] )
      [ Para
          [ Span
              ( "" , [ "theorem-title" ] , [] )
              [ Strong [ Str "Definition" , Space , Str "2" ] ]
          , Space
          , Str "Similarly,"
          , Space
          , Str "we"
          , Space
          , Str "define"
          , Space
          , Str "a"
          , Space
          , Emph [ Str "left-F\248lner" , Space , Str "sequence" ]
          , Space
          , Str "in"
          , Space
          , Str "a"
          , Space
          , Str "group,"
          , Space
          , Math InlineMath "\\Group"
          , Str ","
          , Space
          , Str "as"
          , Space
          , Str "a"
          , Space
          , Str "sequence"
          , Space
          , Math
              InlineMath "\\Folner =(\\Folner[N])_{N\\in\\mathbb{N}}"
          , Space
          , Str "of"
          , Space
          , Str "finite"
          , Space
          , Str "subsets"
          , Space
          , Str "of"
          , Space
          , Math InlineMath "\\Gamma"
          , Space
          , Str "satisfying"
          , Space
          , Math
              DisplayMath
              "\\lim_{N\\rightarrow\\infty}\\frac{|(\\Inverse{\\GroupElement}\\cdot\\Folner[N])\\cap\\Folner[N]|}{|\\Folner[N]|}=1 "
          , Str "for"
          , Space
          , Str "all"
          , Space
          , Math InlineMath "\\GroupElement\\in\\Group"
          , Str "."
          ]
      ]
  , Div
      ( "def-Folner" , [ "theorem" , "definition" ] , [] )
      [ Para
          [ Span
              ( "" , [ "theorem-title" ] , [] )
              [ Strong [ Str "Definition" , Space , Str "3" ] ]
          , Space
          , Str "We"
          , Space
          , Str "call"
          , Space
          , Str "a"
          , Space
          , Str "sequence"
          , Space
          , Str "a"
          , Space
          , Emph [ Str "F\248lner" , Space , Str "sequence" ]
          , Space
          , Str "if"
          , Space
          , Str "it"
          , Space
          , Str "is"
          , Space
          , Str "both"
          , Space
          , Str "a"
          , Space
          , Str "left"
          , Space
          , Str "and"
          , Space
          , Str "right"
          , Space
          , Str "F\248lner"
          , Space
          , Str "sequence."
          ]
      ]
  , Para
      [ Str "A"
      , Space
      , Str "related"
      , Space
      , Str "definition"
      , Space
      , Str "is"
      , Space
      , Str "the"
      , Space
      , Str "following:"
      ]
  , Div
      ( "def-Density" , [ "theorem" , "definition" ] , [] )
      [ Para
          [ Span
              ( "" , [ "theorem-title" ] , [] )
              [ Strong [ Str "Definition" , Space , Str "4" ] ]
          , Space
          , Str "We"
          , Space
          , Str "call"
          , Space
          , Str "define"
          , Space
          , Emph
              [ Str "density"
              , Space
              , Str "of"
              , Space
              , Str "a"
              , Space
              , Str "subset"
              , Space
              , Math InlineMath "A\\subseteq\\Group"
              , Space
              , Str "with"
              , Space
              , Str "respect"
              , Space
              , Str "to"
              , Space
              , Str "a"
              , Space
              , Str "F\248lner"
              , Space
              , Str "sequence,"
              , Space
              , Math InlineMath "\\Folner"
              , Str ","
              ]
          , Space
          , Str "as"
          , SoftBreak
          , Math
              DisplayMath
              "\\Density(A)=\\lim_{N\\rightarrow\\infty}\\frac{|\\Folner[N]\\cap A|}{|\\Folner[N]|},"
          , SoftBreak
          , Str "if"
          , Space
          , Str "it"
          , Space
          , Str "exists."
          ]
      ]
  , Para
      [ Str "For"
      , Space
      , Math InlineMath "\\N"
      , Str ","
      , Space
      , Str "the"
      , Space
      , Emph [ Str "natural" , Space , Str "density" ]
      , Str ","
      , Space
      , Math InlineMath "\\Density[]"
      , Str ","
      , Space
      , Str "is"
      , Space
      , Str "defined"
      , Space
      , Str "when"
      , Space
      , Str "the"
      , Space
      , Str "F\248lner"
      , Space
      , Str "sequence"
      , Space
      , Str "is"
      , Space
      , Str "constructed"
      , Space
      , Str "with"
      , Space
      , Math InlineMath "\\Folner[N]=[1,...,N]"
      , Str "."
      ]
  , Header 1 ( "results" , [] , [] ) [ Str "Results" ]
  , Div
      ( "thm-Test" , [ "theorem" ] , [] )
      [ Para
          [ Span
              ( "" , [ "theorem-title" ] , [] )
              [ Strong
                  [ Str "Theorem"
                  , Space
                  , Str "1"
                  , Space
                  , Str "("
                  , Str "The"
                  , Space
                  , Str "Test"
                  , Space
                  , Str "Theorem"
                  , Str ")"
                  ]
              ]
          , Space
          , Str "This"
          , Space
          , Str "is"
          , Space
          , Str "a"
          , Space
          , Str "Theorem."
          ]
      ]
  , Div
      ( "" , [] , [] )
      [ BlockQuote
          [ Para [ Strong [ Str "Tip" ] ]
          , Para
              [ Str "This"
              , Space
              , Str "is"
              , Space
              , Str "a"
              , Space
              , Str "test"
              , Space
              , Str "tip."
              ]
          ]
      ]
  , Header
      1
      ( "more-information" , [] , [] )
      [ Str "More" , Space , Str "Information" ]
  , Para
      [ Str "You"
      , Space
      , Str "can"
      , Space
      , Str "learn"
      , Space
      , Str "more"
      , Space
      , Str "about"
      , Space
      , Str "controlling"
      , Space
      , Str "the"
      , Space
      , Str "appearance"
      , Space
      , Str "of"
      , Space
      , Str "HTML"
      , Space
      , Str "output"
      , Space
      , Str "here:"
      , Space
      , Link
          ( "" , [ "uri" ] , [] )
          [ Str
              "https://quarto.org/docs/output-formats/html-basics.html"
          ]
          ( "https://quarto.org/docs/output-formats/html-basics.html"
          , ""
          )
      ]
  ]
